/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




    #include <time.h>
    typedef unsigned int speed_t;
    #include <cstdio>
    #include <cstdlib>
    #include <vector>
    #include "include/kovan/sensor.hpp"
    #include "include/kovan/button.hpp"
    #include "include/kovan/create.hpp"
    #define PI 3.14159f


#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_new_1CreateScript_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CreateScript *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CreateScript *)new CreateScript();
  *(CreateScript **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_new_1CreateScript_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateScript *arg1 = 0 ;
  CreateScript *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CreateScript const & reference is null");
    return 0;
  } 
  result = (CreateScript *)new CreateScript((CreateScript const &)*arg1);
  *(CreateScript **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->append((unsigned char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  (arg1)->append((unsigned char const *)arg2,(size_t const &)*arg3);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  CreateScript *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CreateScript **)&jarg1; 
  arg2 = *(CreateScript **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CreateScript const & reference is null");
    return ;
  } 
  (arg1)->append((CreateScript const &)*arg2);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t *arg2 = 0 ;
  size_t *arg3 = 0 ;
  size_t temp2 ;
  size_t temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  (arg1)->remove((size_t const &)*arg2,(size_t const &)*arg3);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t *arg2 = 0 ;
  size_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((size_t const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateScript *arg1 = (CreateScript *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  result = (unsigned char *)((CreateScript const *)arg1)->data();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  result = ((CreateScript const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateScript_1_1byte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t *arg2 = 0 ;
  size_t temp2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  result = (unsigned char)(arg1)->byte((size_t const &)*arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_delete_1CreateScript(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CreateScript **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  timeval arg2 ;
  timeval *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  argp2 = *(timeval **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  timeval result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result =  ((arg1)->timestamp);
  *(timeval **)&jresult = new timeval((const timeval &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jint JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (int) ((arg1)->distance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT jint JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (int) ((arg1)->angle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT jshort JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (short) ((arg1)->radius);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1rightVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->rightVelocity = arg2;
}


SWIGEXPORT jshort JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1rightVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (short) ((arg1)->rightVelocity);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1leftVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->leftVelocity = arg2;
}


SWIGEXPORT jshort JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_CreateState_1leftVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (short) ((arg1)->leftVelocity);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_new_1CreateState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CreateState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CreateState *)new CreateState();
  *(CreateState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_delete_1CreateState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CreateState *arg1 = (CreateState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CreateState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_delete_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Create **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (bool)(arg1)->connect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (bool)((Create const *)arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setPassiveMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->setPassiveMode();
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setSafeMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->setSafeMode();
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setFullMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->setFullMode();
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  Create::Mode *arg2 = 0 ;
  Create::Mode temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (Create::Mode)jarg2; 
  arg2 = &temp2; 
  (arg1)->setMode((Create::Mode const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Create::Mode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Create::Mode)(arg1)->mode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Create *arg1 = (Create *) 0 ;
  CreateScript *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(CreateScript **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CreateScript const & reference is null");
    return ;
  } 
  (arg1)->send((CreateScript const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)(arg1)->write((unsigned char const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->write((unsigned char const *)arg2,(size_t const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->flush();
}


SWIGEXPORT jshort JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (short)(arg1)->read();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->read(arg2,(size_t const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1blockingRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  unsigned int arg4 ;
  size_t temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->blockingRead(arg2,(size_t const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1blockingRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->blockingRead(arg2,(size_t const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setLeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jshort jarg4, jshort jarg5) {
  Create *arg1 = (Create *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  unsigned char *arg4 = 0 ;
  unsigned char *arg5 = 0 ;
  bool temp2 ;
  bool temp3 ;
  unsigned char temp4 ;
  unsigned char temp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  temp4 = (unsigned char)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned char)jarg5; 
  arg5 = &temp5; 
  (arg1)->setLeds((bool const &)*arg2,(bool const &)*arg3,(unsigned char const &)*arg4,(unsigned char const &)*arg5);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1drive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short *arg3 = 0 ;
  short temp2 ;
  short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (short)jarg3; 
  arg3 = &temp3; 
  (arg1)->drive((short const &)*arg2,(short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1driveDirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short *arg3 = 0 ;
  short temp2 ;
  short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (short)jarg3; 
  arg3 = &temp3; 
  (arg1)->driveDirect((short const &)*arg2,(short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1driveStraight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->driveStraight((short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1turn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  unsigned short *arg3 = 0 ;
  short temp2 ;
  unsigned short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  (arg1)->turn((short const &)*arg2,(unsigned short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  unsigned short *arg3 = 0 ;
  short temp2 ;
  unsigned short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  (arg1)->move((short const &)*arg2,(unsigned short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1spin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->spin((short const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1angularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (short)((Create const *)arg1)->angularVelocity();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1spinClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->spinClockwise((short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1spinCounterClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->spinCounterClockwise((short const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setBaudRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)(arg1)->setBaudRate((unsigned char const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDistance(arg2);
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAngle(arg2);
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1playButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  AbstractButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (AbstractButton *)((Create const *)arg1)->playButton();
  *(AbstractButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1advanceButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  AbstractButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (AbstractButton *)((Create const *)arg1)->advanceButton();
  *(AbstractButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1wall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wall();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffFrontLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffFrontLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffFrontRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffFrontRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1virtualWall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->virtualWall();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1wallSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->wallSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffLeftSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffLeftSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffFrontLeftSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffFrontLeftSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffFrontRightSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffFrontRightSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cliffRightSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffRightSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cargoBayAnalogSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cargoBayAnalogSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1cargoBayDigitalInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned char > *)((Create const *)arg1)->cargoBayDigitalInputs();
  *(Sensor< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1ir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned char > *)((Create const *)arg1)->ir();
  *(Sensor< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1chargingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned char > *)((Create const *)arg1)->chargingState();
  *(Sensor< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1batteryTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< char > *)((Create const *)arg1)->batteryTemperature();
  *(Sensor< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1batteryCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->batteryCharge();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1batteryCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->batteryCapacity();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< int > *)((Create const *)arg1)->angle();
  *(Sensor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< int > *)((Create const *)arg1)->distance();
  *(Sensor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1bumpLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->bumpLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1bumpRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->bumpRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1wheelDropLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wheelDropLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1wheelDropRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wheelDropRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1wheelDropCaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wheelDropCaster();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1setRefreshRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->setRefreshRate((unsigned short const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1refreshRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (unsigned short *) &((Create const *)arg1)->refreshRate();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1instance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Create *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Create *)Create::instance();
  *(Create **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_linkjvm_low_create_linkjvm_1createJNI_Create_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  CreateState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (CreateState *)(arg1)->state();
  *(CreateState **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

